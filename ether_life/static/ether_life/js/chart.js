
const ctx = document.getElementById('ethChart').getContext('2d');
                    console.log("‚úÖ WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.");
                    const ethChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [{
                                label: 'Ethereum Price (USD)',
                                data: [],
                                borderColor: "gray",  // –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏
                                backgroundColor: "rgba(0, 0, 255, 0.1)",
                                borderWidth: 2, // –ë–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞
                                fill: true,
                                pointRadius: 3, // –†–∞–¥–∏—É—Å —Ç–æ—á–µ–∫
                                pointBackgroundColor: "gray", // –¶–≤–µ—Ç —Ç–æ—á–µ–∫
                                segment: {
                                    borderColor: ctx => {
                                        const chart = ctx.chart;
                                        const { data } = chart.data.datasets[0];
                                        const index = ctx.p1DataIndex;  // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
                    
                                        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
                                        if (index === 0) return "gray";
                    
                                        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                        return data[index] > data[index - 1] ? "green" : "red";
                                    },
                                    borderWidth: ctx => {
                                        const chart = ctx.chart;
                                        const { data } = chart.data.datasets[0];
                                        const index = ctx.p1DataIndex;
                    
                                        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
                                        if (index === 0) return 2;
                    
                                        // –¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ, —Ç–æ–Ω–∫–∞—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
                                        return data[index] < data[index - 1] ? 7 : 1;
                                    }
                                }
                            }]
                        },
                        options: {
                            scales: {
                                x: { title: { display: true, text: "–í—Ä–µ–º—è" } },
                                y: { title: { display: true, text: "–¶–µ–Ω–∞ (USD)" } }
                            }
                        }
                    });
                    
                if (typeof window.ethereum === 'undefined') {
                    console.warn("ethereum –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window.");
                } else {
                    console.warn("ethereum —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, MetaMask). –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å—Ç—Ä–∞–Ω—ë–Ω.");
                }
                    
                // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
                const socket = new WebSocket(
                        window.location.protocol === "https:" ? 
                        `wss://${window.location.host}/ws/eth-price/` : 
                        `ws://${window.location.host}/ws/eth-price/`
                    );

                // socket.onmessage = function (event) {
                //     console.log("üì© –î–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:", event.data);
                //     const data = JSON.parse(event.data);

                socket.onmessage = function (event) {
                    console.log("üì© –î–∞–Ω–Ω—ã–µ –æ—Ç WebSocket:", event.data);
                    const data = JSON.parse(event.data);
                    if (!data.prices || !Array.isArray(data.prices)) {
                        console.error("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ WebSocket –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
                        return;
                    }
            
                    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º **—Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É**
                    let latest_price = data.prices[0].price;
                    let previous_price = data.prices[1].price;
            
                    // ‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    let priceElement = document.getElementById("eth-price");
                    priceElement.innerText = latest_price + " USD " + (latest_price > previous_price ? "‚Üë" : "‚Üì");
                    priceElement.style.color = latest_price > previous_price ? "green" : "red";
                    document.getElementById("current").style.color = latest_price > previous_price ? "green" : "red";
                
                    
                    const sortedPrices = data.prices;
                    console.log(`sortedPrices[0].timestamp: ${sortedPrices[0].timestamp}`);
                    // console.log(`–í—Ä–µ–º—è: ${isoString}`);
                    // const sortedPrices = data.prices.filter(p => p.price !== undefined);
                    // ‚úÖ 2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                    ethChart.data.labels = [];
                    ethChart.data.datasets[0].data = [];
                    //ethChart.data.datasets[0].borderColor = [];
                    sortedPrices.forEach(priceData => {
                        
                        ethChart.data.labels.unshift(convertISOToLocal(priceData.timestamp));
                        ethChart.data.datasets[0].data.unshift(priceData.price);
                    });
                    // –∫—Ä–∞—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã(–∑–≤–µ–Ω—å—è) –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ñ–æ–Ω –ø–æ–¥ –Ω–∏–º–∏
                    ethChart.data.datasets[0].segment = {
                        borderColor: ctx => {
                            const index = ctx.p1DataIndex; // –ò–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                            if (!index || index === 0) return "gray"; // –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ ‚Äî —Å–µ—Ä–∞—è
                            return ethChart.data.datasets[0].data[index] > ethChart.data.datasets[0].data[index - 1] 
                                ? "green"  // üìà –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç ‚Äî –∑–µ–ª—ë–Ω—ã–π
                                : "red";    // üìâ –ï—Å–ª–∏ –ø–∞–¥–∞–µ—Ç ‚Äî –∫—Ä–∞—Å–Ω—ã–π
                        },
                        backgroundColor: ctx => {
                            const index = ctx.p1DataIndex;
                            if (!index || index === 0) return "rgba(128, 128, 128, 0.1)"; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
                            return ethChart.data.datasets[0].data[index] > ethChart.data.datasets[0].data[index - 1] 
                                ? "rgba(0, 255, 0, 0.1)"  // üìà –ó–µ–ª—ë–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                                : "rgba(255, 0, 0, 0.1)";  // üìâ –ö—Ä–∞—Å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                        }
                    };
                    // —Ü–≤–µ—Ç –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
                    ethChart.data.datasets[0].borderColor = sortedPrices.reverse().map((priceData, i) => {
                        if (i === 0) return "gray";
                        return sortedPrices[i].price > sortedPrices[i - 1].price ? "green" : "red";
                    });
                     // —Ä–∞–∑–º–µ—Ä –º–µ–∂–∑–≤–µ–Ω—å–µ–≤–æ–π —Ç–æ—á–∫–∏
                    ethChart.data.datasets[0].borderWidth = sortedPrices.map((priceData, i) => {
                        if (i === 0) return 2;
                        return sortedPrices[i].price > sortedPrices[i - 1].price ? 4 : 4;
                    });
                    
                    
                
                    // ‚úÖ 4. –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                    ethChart.update();
                };
            
                socket.onclose = function(event) {
                    console.log("WebSocket –∑–∞–∫—Ä—ã—Ç, –∫–æ–¥:", event.code);
                };
            
                socket.onerror = function (error) {
                    console.error("WebSocket –û—à–∏–±–∫–∞: ", error);
                };

                function convertISOToLocal(isoString) {
                    console.log(`isoString = ${isoString}`);
                    let date = new Date(isoString);
                    return date.toLocaleString(); 
                }


                // function convertISOToLocal(parametr) {
                //     console.log(`parametr = ${parametr}`);
                
                //     // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "18.03.2025 15:52:07"
                //     let parts = parametr.split(" ");
                //     let dateParts = parts[0].split("."); // ["18", "03", "2025"]
                //     let timePart = parts[1]; // "15:52:07"
                
                //     // –§–æ—Ä–º–∏—Ä—É–µ–º ISO-—Å—Ç—Ä–æ–∫—É
                //     let isoString = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}T${timePart}.000Z`;
                //     console.log(`–¢–∏–ø –≤—Ä–µ–º–µ–Ω–∏: ${typeof isoString}`);
                //     console.log(`–í—Ä–µ–º—è: ${isoString}`);
                
                //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É
                //     let timestamp = Date.parse(isoString);
                //     if (isNaN(timestamp)) {
                //         console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:", isoString);
                //         return "Invalid Date";
                //     }
                //         timeLable = new Date(timestamp).toLocaleString();
                //     return timeLable.slice(0,6) + timeLable.slice(8);
                // }
                